"build/ints" load

[ Polaris 2020 scoping library ]

0 >__$scopecount

( [ "addsc": Adds a local scope ]
    @__$scopecount 1 + >__$scopecount
) >addsc

( [ "delsc": Deletes a local scope]
    (@__$scopecount 0 ?>)
        (@__$scopecount 1 - >__$scopecount)
        ("No scopes left to delete when calling delsc." pliberror%)
        if
) >delsc

( [ "lset": Saves a local variable ]
    [ Par 1: value ]
    [ Par 2: var name (top)]
    "__$localvar" @__$scopecount join join set
) >lset

( [ "lget": Gets a local variable ]
    [ Par 1: value ]
    "__$localvar" @__$scopecount join join get
) >lget



[ Project Euler Problem 2 ]

[fibonacci i] ( addsc%
    n lset%
    [ Check if the number is already catched ]
    [if] ("fibo" n lget% join varex 1 =) [then] (
        "fibo" n lget% join get
    ) [else] (
        [if] (n lget% 1 <=) [then] (
            n lget%
        ) [else] (
            n lget% 1 - fibonacci%   n lget% 2 - fibonacci%   +
            copy "fibo" n lget% join set
        ) if
    ) if
delsc% ) >fibonacci

-1 >i
0 >lastfibo
0 >total
[while] (@lastfibo 4000000 <) [do] (
    [get next fibonacci number]
    @i 1 + >i
    @i fibonacci% >lastfibo
    "Index: " @i fprint

    [if its less than 4000000 and even, add it to total]

    [if] (@lastfibo 4000000 < @lastfibo 2 % 0 = &) [then] (
        "Index " @i " is even." fprint
        @total @lastfibo + >total
    ) () if
) while

"Total sum of even values: " @total fprint