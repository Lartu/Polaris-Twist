load_comma_separated_list "list.txt" Lista
def countneg list { filter list {< 0}; count }
def countpos list { filter list {> 0}; count }
display (max (countneg (get Lista)) (countpos (get Lista)))

lcsl "list.txt" list
$ countneg : list { :#. list {< 0}; #? }
$ countpos : list { :#. list {> 0}; #? }
disp (max (countneg (@ list)) (countpos (@ list)))

load_comma_separated_list "list.txt" Lista
def countneg list { filter list {< 0}; count }
def countpos list { filter list {> 0}; count }
display (max (countneg (get Lista)) (countpos (get Lista)))

Sería razonable que si yo voy a llamar a una función externa, le tenga que
pasar una referencia a mi estado. Asimismo, una función no debería tener
que acceder a un estado por fuera de sí misma, bien puede recibir ese estado si
lo necesita. Por lo tanto, una ejecución de una función bien podría ser solamente
llamar al intérprete de GTVQ con un estado construído solo a partir de los parámetros
de la función y, por lo tanto, ese estado podría ser cacheado si hace falta (con
algo tipo $c).




load_comma_separated_list "list.txt" Lista
def filtercount list check { filter list check; count }
display (max (filtercount (get Lista) {< 0}) (filtercount (get Lista) {> 0}))